// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user{
  id Int @id @default(autoincrement())
  username String
  email String @unique
  password String
  shipping_address String? 
  created_at DateTime @default(now())
  payment_info String?
  order order[]
  review review[]
}

model admin {
  id Int @id @default(autoincrement())
  username String 
  email String @unique
  password String 
  created_at DateTime @default(now())
}

model author {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  biography String?
  book book[]
  created_at DateTime @default(now())
}

model book {
  id Int @id @default(autoincrement())
  title String
  description String
  author author @relation(fields: [author_id],references: [id])
  author_id Int
  category category
  price Int
  inventory Int
  published_date DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  review review[]
}

model order {
  id Int @id @default(autoincrement())
  user user @relation(fields: [user_id],references: [id])
  user_id Int
  items String[]
  total_price Int
  status status @default(PENDING)
  created_at DateTime @default(now())
}

model review {
  id Int @id @default(autoincrement())
  book book @relation(fields: [book_id],references: [id])
  user user @relation(fields: [user_id],references: [id])
  book_id Int
  user_id Int
  rating Int
  comment String
  created_at DateTime @default(now())
}

enum category {
  FICTION
  NON_FICTION
}

enum status {
  PENDING
  DELIVERED
  SHIPPED
}
